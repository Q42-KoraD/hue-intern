# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: # optional
          # The path to the `.java-version` file. See examples of supported syntax in README file
          java-version-file: # optional
          # Java distribution. See the list of supported distributions in README file
          distribution: oracle
          # The package type (jdk, jre, jdk+fx, jre+fx)
          java-package: # optional, default is jdk
          # The architecture of the package (defaults to the action runner's architecture)
          architecture: # optional
          # Path to where the compressed JDK is located
          jdkFile: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: # optional
          # ID of the distributionManagement repository in the pom.xml file. Default is `github`
          server-id: # optional, default is github
          # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
          server-username: # optional, default is GITHUB_ACTOR
          # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
          server-password: # optional, default is GITHUB_TOKEN
          # Path to where the settings.xml file will be written. Default is ~/.m2.
          settings-path: # optional
          # Overwrite the settings.xml file if it exists. Default is "true".
          overwrite-settings: # optional, default is true
          # GPG private key to import. Default is empty string.
          gpg-private-key: # optional
          # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
          gpg-passphrase: # optional
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          cache: # optional
          # The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the `cache` option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
          cache-dependency-path: # optional
          # Workaround to pass job status to post job step. This variable is not intended for manual setting
          job-status: # optional, default is ${{ job.status }}
          # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
          mvn-toolchain-id: # optional
          # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
          mvn-toolchain-vendor: # optional
                    
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=Q42-KoraD_hue-intern
            -Dsonar.organization=Q42-KoraD
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
